// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class GraphQLParser {
	public static void consumeObject(JSONParser parser) {
		Integer depth = 0; 
		do {
			JSONToken curr = parser.getCurrentToken();
			if (curr == JSONToken.START_OBJECT || 
				curr == JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == JSONToken.END_OBJECT ||
				curr == JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

	public class Meta {
		public Integer id {get;set;} 
		public String type_Z {get;set;} // in json: type
		public Boolean deleted {get;set;} 

		public Meta(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'deleted') {
							deleted = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Relationships {

		public Relationships(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Relationships consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Graph {
		public List<Nodes> nodes {get;set;} 
		public List<Relationships> relationships {get;set;} 

		public Graph(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'nodes') {
							nodes = new List<Nodes>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								nodes.add(new Nodes(parser));
							}
						} else if (text == 'relationships') {
							relationships = new List<Relationships>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								relationships.add(new Relationships(parser));
							}
						} else {
							System.debug(LoggingLevel.WARN, 'Graph consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Results {
		public List<String> columns {get;set;} 
		public List<Data> data {get;set;} 

		public Results(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'columns') {
							columns = new List<String>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								columns.add(parser.getText()); 
							}
						} else if (text == 'data') {
							data = new List<Data>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								data.add(new Data(parser));
							}
						} else {
							System.debug(LoggingLevel.WARN, 'Results consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class InnerGraphQLParser {
		public List<Results> results {get;set;} 

		public InnerGraphQLParser(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'results') {
							results = new List<Results>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								results.add(new Results(parser));
							}
						} else {
							System.debug(LoggingLevel.WARN, 'InnerGraphQLParser consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public List<Row> row {get;set;} 
		public List<Meta> meta {get;set;} 
		public Graph graph {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'row') {
							row = new List<Row>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								row.add(new Row(parser));
							}
						} else if (text == 'meta') {
							meta = new List<Meta>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								meta.add(new Meta(parser));
							}
						} else if (text == 'graph') {
							graph = new Graph(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Row {
		public Integer born {get;set;} 
		public String name {get;set;} 

		public Row(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'born') {
							born = parser.getIntegerValue();
						} else if (text == 'name') {
							name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Row consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Nodes {
		public String id {get;set;} 
		public List<String> labels {get;set;} 
		public Row properties {get;set;} 

		public Nodes(JSONParser parser) {
			while (parser.nextToken() != JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'labels') {
							labels = new List<String>();
							while (parser.nextToken() != JSONToken.END_ARRAY) {
								labels.add(parser.getText());
							}
						} else if (text == 'properties') {
							properties = new Row(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Nodes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static InnerGraphQLParser parse(String json) {
		return new InnerGraphQLParser(System.JSON.createParser(json));
	}
}